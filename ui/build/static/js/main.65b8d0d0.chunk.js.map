{"version":3,"sources":["api.js","components/FormInput.jsx","components/List.jsx","components/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["getAllTodoItems","a","fetch","process","request","status","alert","json","saveTodoItem","todoItem","method","body","JSON","stringify","completeTodoItem","id","deleteTodoItem","useStyles","makeStyles","root","background","border","color","height","padding","whiteSpace","margin","label","width","TodoCreator","theme","todo","setTodo","clearInput","inputRef","isInputEmpty","preventSubmit","classes","className","ThemeProvider","FormControl","TextField","value","variant","onChange","e","target","onFocus","ref","aria-describedby","onKeyPress","FormHelperText","Button","type","alt","backgroundColor","li","borderBottom","TodoList","todos","completeTodo","saveTodo","noteRef","deleteTodo","React","useState","checked","setChecked","handleToggle","inx","currentIndex","indexOf","newChecked","push","splice","List","map","labelId","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","onClick","isEditing","htmlFor","text","defaultValue","element","current","IconButton","aria-label","ListItemText","primary","style","textDecoration","isCompleted","ListItemSecondaryAction","createMuiTheme","palette","main","Form","newTodo","setNewTodo","setTodos","useEffect","then","useRef","setInputEmpty","key","preventDefault","onSubmit","focus","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65b8d0d0.chunk.js","sourcesContent":["export const getAllTodoItems = async () => {\n  const request = await fetch(\n    `${process.env.REACT_APP_API_BASE_URL}/api/todos`\n  );\n\n  if (request.status !== 200) {\n    alert(\"Error fetching todo items\");\n  }\n  return await request.json();\n};\n\nexport const saveTodoItem = async (todoItem) => {\n  const request = await fetch(\n    `${process.env.REACT_APP_API_BASE_URL}/api/todos`,\n    { method: \"POST\", body: JSON.stringify(todoItem) }\n  );\n\n  if (request.status !== 200) {\n    alert(\"Error while storing todo item\");\n  }\n  return await request.json();\n};\n\nexport const completeTodoItem = async (id) => {\n  const request = await fetch(\n    `${process.env.REACT_APP_API_BASE_URL}/api/todos/${id}`,\n    { method: \"UPDATE\" }\n  );\n\n  if (request.status !== 200) {\n    alert(\"Error while marking todo item as down\");\n  }\n  return await request.json();\n};\n\nexport const deleteTodoItem = async (id) => {\n  const request = await fetch(\n    `${process.env.REACT_APP_API_BASE_URL}/api/todos/${id}`,\n    { method: \"DELETE\" }\n  );\n\n  if (request.status !== 200) {\n    alert(\"Error while marking todo item as down\");\n  }\n  return await request.json();\n};\n","import Button from \"@material-ui/core/Button\";\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport TextField from \"@material-ui/core/TextField\";\nimport React from 'react';\n\nconst useStyles = makeStyles({\n    root: {\n        background: 'linear-gradient(45deg, gray 30%, black 90%)',\n        border: 0,\n        color: 'white',\n        height: 30,\n        padding: '0 10px',\n        whiteSpace: 'nowrap',\n        margin: '15px 0 0 20px',\n    },\n    label: {\n        width: '80%'\n    }\n});\n\n\nconst TodoCreator = ({ theme, todo, setTodo, clearInput, inputRef, isInputEmpty, preventSubmit }) => {\n    const classes = useStyles();\n\n    return (\n        <div className=\"form__input\">\n            <ThemeProvider theme={theme}>\n                <FormControl   className={classes.label}>\n                    <TextField\n                        id=\"outlined-basic\"\n                        label=\"What's need to be done?\" \n                        value={todo}\n                        variant=\"outlined\"\n                        onChange={(e) => setTodo(e.target.value)}\n                        onFocus={clearInput}\n                        ref={inputRef}\n                        aria-describedby=\"component-error-text\"\n                        onKeyPress={preventSubmit}\n                    />\n\n                    { !isInputEmpty ?\n                        <></>\n                        :\n                        <>\n                            <FormHelperText id=\"component-error-text\">Task can't be empty</FormHelperText>\n                        </>\n                    }\n                </FormControl>\n                <Button\n                    type=\"submit\"\n                    alt=\"add-note\"\n                    className={classes.root}\n                    onKeyPress={preventSubmit}\n                >\n                    Add task\n                </Button>\n            </ThemeProvider>\n        </div>\n    )\n\n}\n\nexport  default TodoCreator;","import Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\nimport BookmarkIcon from '@material-ui/icons/Bookmark';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport React from 'react';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        width: '100%',\n        backgroundColor: '#f5f5f5',\n        padding: 0\n    },\n    li: {\n        borderBottom: '1px dashed black'\n    }\n}));\n\nconst TodoList = ({ theme, todos, completeTodo, saveTodo, noteRef, preventSubmit,deleteTodo }) => {\n    const classes = useStyles();\n    const [checked, setChecked] = React.useState([0]);\n\n\n    const handleToggle = (value, inx) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n        completeTodo(inx);\n    };\n\n\n    return (\n        <ThemeProvider theme={theme}>\n            <List className={classes.root}>\n            {\n                todos ?\n                todos.map((todo, inx) => {\n                const labelId = `list-todo-${todo}`;\n                return (\n                    <ListItem\n                        key={todo.id}\n                        role={undefined}\n                        dense\n                        button\n                        className={classes.li}\n                    >\n                        <ListItemIcon>\n                            <Checkbox\n                                color=\"primary\"\n                                edge=\"start\"\n                                checked={checked.indexOf(todo) !== -1}\n                                tabIndex={-1}\n                                disableRipple\n                                inputProps={{ 'aria-labelledby': labelId }}\n                                onClick={handleToggle(todo, inx)}\n                                onKeyPress={preventSubmit}\n                            />\n                        </ListItemIcon>\n                        {\n                            (!todo.isEditing) ?\n                                <>\n                                    <ListItemText\n                                        id={labelId}\n                                        primary={`${todo.text}`}\n                                        style={{textDecoration: todo.isCompleted ? \"line-through\" : \"\"}}\n                                    />\n                                </>\n                                :\n                                <>\n                                    <label\n                                        htmlFor=\"task\" \n                                        className=\"visuallyhidden\"\n                                    >\n                                        {todo.text}\n                                    </label>\n                                    <input\n                                        className=\"form__edit-input\"\n                                        defaultValue={todo.text}\n                                        ref={(element) => noteRef.current[inx] = element}\n                                        onKeyPress={preventSubmit}\n                                        id=\"task\"\n                                    />\n                                    <ListItemIcon>\n                                        <IconButton onClick={() => saveTodo(inx)} edge=\"end\" aria-label=\"delete\">\n                                            <BookmarkIcon />\n                                        </IconButton>\n                                    </ListItemIcon>\n                                </>\n                        }\n                        <ListItemSecondaryAction>\n                            <IconButton onClick={() => deleteTodo(inx)} edge=\"end\" aria-label=\"delete\">\n                                <DeleteIcon />\n                            </IconButton>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            })\n             : <>Loading ...</>\n            }\n            {}\n        </List>\n        </ThemeProvider>\n    );\n}\n\nexport default TodoList;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { completeTodoItem, deleteTodoItem, getAllTodoItems, saveTodoItem } from \"./../api\";\nimport TodoCreator from \"./FormInput\";\nimport TodoList from \"./List\";\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: { main: '#000000' },\n    },\n});\n\nconst Form = () => {\n\n    const [ newTodo, setNewTodo ] = useState('');\n    const [ todos, setTodos ] = useState(undefined);\n    useEffect(() => {\n        getAllTodoItems().then(e => setTodos(e))\n    },[])\n    const inputRef = useRef();\n    const noteRef = useRef({});\n    const [ isInputEmpty, setInputEmpty ] = useState(false)\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        saveTodo(newTodo);\n        clearInput();\n        inputRef.current.focus();\n    };\n\n    const preventSubmit = e => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n        }\n    };\n\n    const saveTodo = async text => {\n        if ( text !== '') {\n            await saveTodoItem({ \n                text: text,\n                isCompleted: false,\n            })\n            const todos = await getAllTodoItems();\n            setTodos(todos);\n           \n        } else {\n            setInputEmpty(true);\n        }\n    };\n\n    const completeTodo = async id => {\n        await completeTodoItem(id)\n        const todos = await getAllTodoItems();\n        setTodos(todos);\n    };\n    const deleteTodo = async id => {\n        await deleteTodoItem(id)\n        const todos = await getAllTodoItems();\n        setTodos(todos);\n    }\n    const clearInput = () => {\n        setNewTodo('');\n    }\n\n    const setTodo = todo => {\n        setInputEmpty(false);\n        setNewTodo(todo);\n    }\n\n   \n\n\n    return (\n        <form onSubmit={handleSubmit} className=\"form\">\n\n                <TodoCreator\n                    theme={theme}\n                    todo={newTodo}\n                    setTodo={setTodo}\n                    clearInput={clearInput}\n                    inputRef={inputRef}\n                    isInputEmpty={isInputEmpty}\n                    preventSubmit={preventSubmit}\n                />\n\n                <TodoList\n                    theme={theme}\n                    todos={todos}\n                    completeTodo={completeTodo}\n                    saveTodo={saveTodo}\n                    noteRef={noteRef}\n                    deleteTodo={deleteTodo}\n                    preventSubmit={preventSubmit}\n                />\n            </form>\n    )\n}\n\nexport default Form;","import './App.css';\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <h1>Todo List</h1>\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}